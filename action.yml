name: Generate SDK Action
description: Generate an SDK using the OpenAPI Generator Project
inputs: 
  file-source: 
    description: '`local` or `remote` - where to clone the api specs from'
    default: remote
    required: false
  spec-merge-config: 
    description: The path to the config file for the openapi-merge-cli tool
    default: utils/openapi-merge.yml
    required: false
  branch-name: 
    description: Branch name
    required: true
  user-email: 
    description: Git user email
    default: dx@bandwidth.com
    required: false
  username: 
    description: Github auth username
    required: true
  token: 
    description: Github auth token
    required: true
  specs-organization: 
    description: Owner of the remote repository
    default: Bandwidth
    required: false
  specs-repository: 
    description: the remote repository to clone
    default: api-specs 
    required: false
  generator-organization: 
    description: The git orgaization for the generator repository
    required: false
    default: OpenAPITools
  generator-repository: 
    description: The git repository for the generator 
    required: false
    default: openapi-generator
  openapi-generator-version: 
    description: The OpenAPI Generator project version, in `v5.3.1` format
    required: false
    default: 'v5.3.1'
  language: 
    description: The generator name (`-g`) argument for the openapi generator
    required: true
  config:
    description: The configuration (`-c`) argument for the openapi generator
    required: false

# outputs: 

runs: 
  using: composite
  steps: 
    - name: Create and push branch
      run: |
          git config user.email ${{ inputs.user-email }}
          git config user.name ${{ inputs.username }}
          git fetch origin
          if [ -z $(git show-ref refs/remotes/origin/${{ inputs.branch-name }}) ]
          then
            git checkout -b ${{ inputs.branch-name }}
          else
            git switch -c ${{ inputs.branch-name }} origin/${{ inputs.branch-name }}
          fi
      shell: bash
    
    - name: Create and push branch with upstream api specs
      if: inputs.file-source == 'remote' 
      run: |
          mkdir remote
          git clone --branch ${{ inputs.branch-name }} https://${{ inputs.username }}:${{ inputs.token }}@github.com/${{ inputs.specs-organization }}/${{ inputs.specs-repository }} remote
          rm -r remote/.git
      shell: bash
   
    - name: Stich Specs Together
      run: |
        npm i openapi-merge-cli
        npx openapi-merge-cli --config ${{ inputs.spec-merge-config }}
        ls -la 
      shell: bash

    - name: Clone OpenAPI Generator Project
      run: |
        mkdir generator
        git clone -b ${{ inputs.openapi-generator-version }} --single-branch https://github.com/${{ inputs.generator-organization }}/${{ inputs.generator-repository }} generator
        ls -la
      shell: bash

    - name: Build SDK
      run: |
        grep -A3 'output:' ${{ inputs.spec-merge-config }} | tail -n1 | cut -c 9- | sed 's/"//g'
        echo "help me"
      shell: bash

    - name: Remove Remote Directory
      if: inputs.file-source == 'remote' 
      run: rm -r remote
      shell: bash
    
    - name: Cleanup
      run: |
          rm -r generator
          rm -r node_modules
      shell: bash

    - name: Commmit
      run: |
          git add .
          git commit --allow-empty -m "Generate SDK"
          git push origin ${{ inputs.branch-name }}
      shell: bash

    - name: Open Pull Request
      run: |
          if [ -z $(hub pr list -h {{ inputs.branch-name }}) ]
          then
            hub pull-request --base ${{ inputs.specs-organization}}:main -m '${{ inputs.branch-name }}' -m 'Generate SDK with Upstream API Spec Changes'
          fi

      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      shell: bash

