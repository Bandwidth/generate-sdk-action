name: Generate SDK Action
description: Generate an SDK using the OpenAPI Generator Project
inputs: 
  branch-name: 
    description: Branch name
    required: true
  user-email: 
    description: Git user email
    default: dx@bandwidth.com
    required: false
  username: 
    description: Github auth username
    required: true
  token: 
    description: Github auth token
    required: true
  specs-organization: 
    description: Owner of the remote repository
    default: Bandwidth
    required: false
  specs-repository: 
    description: the remote repository to clone
    default: api-specs 
    required: false
  file-source: 
    description: '`local` or `remote` - where to clone the api specs from'
    default: remote
    required: false
  spec-merge-config: 
    description: The path to the config file for the openapi-merge-cli tool
    default: ./utils/openapi-merge.yml
    required: false
  run-pre-stitch-script: 
    description: Boolean flag to run the preStitch.js script in the sdk-utils repository
    default: 'true'
    required: false
  run-stitch-script: 
    description: Boolean flag to run the openapi-merge cli 
    default: 'true'
    required: false
  run-post-stitch-script: 
    description: Boolean flag to run the preStitch.js script in the sdk-utils repository
    default: 'true'
    required: false
  generator-organization: 
    description: The git orgaization for the generator repository
    required: false
    default: OpenAPITools
  generator-repository: 
    description: The git repository for the generator 
    required: false
    default: openapi-generator
  openapi-generator-version: 
    description: The OpenAPI Generator project version, in `v5.4.0` format
    required: false
    default: 'v5.4.0'
  api-spec-path: 
    description: The destination of the API Specification after going through the openapi-merge tool
    required: false
    default: ./utils/bandwidth.json
  language: 
    description: The generator name (`-g`) argument for the openapi generator
    required: true
  config:
    description: The configuration (`-c`) argument for the openapi generator
    required: true

outputs: 
  pr-number: 
    description: "The number of the PR that was opened"
    value: ${{ steps.output-pr-number.outputs.pr-number }}

runs: 
  using: composite
  steps: 
    - name: Create and push branch
      run: |
          git config user.email ${{ inputs.user-email }}
          git config user.name ${{ inputs.username }}
          git fetch origin
          if [ -z $(git show-ref refs/remotes/origin/${{ inputs.branch-name }}) ]
          then
            git checkout -b ${{ inputs.branch-name }}
            git push origin ${{ inputs.branch-name }} 
          else
            git switch -c ${{ inputs.branch-name }} origin/${{ inputs.branch-name }}
            git pull
          fi
      shell: bash
    
    - name: Create and push branch with upstream api specs
      if: inputs.file-source == 'remote' 
      run: |
          mkdir remote
          git clone --branch ${{ inputs.branch-name }} https://${{ inputs.username }}:${{ inputs.token }}@github.com/${{ inputs.specs-organization }}/${{ inputs.specs-repository }} remote
          rm -r remote/.git
      shell: bash

    - name: Clone sdk-utils
      if: inputs.file-source == 'remote'
      run: |
        mkdir utils
        git clone https://${{ inputs.username }}:${{ inputs.token }}@github.com/Bandwidth/sdk-utils utils
        rm -r utils/.git
      shell: bash

    - name: Run preStitch script 
      if: inputs.run-pre-stitch-script == 'true'
      run: |
        cd utils
        npm install
        node preStitch.js --config ./openapi-merge.yml
      shell: bash
   
    - name: Stitch Specs Together
      if: inputs.run-stitch-script == 'true'
      run: |
        npm i openapi-merge-cli
        npx openapi-merge-cli --config ${{ inputs.spec-merge-config }}
      shell: bash

    - name: Run postStitch script 
      if: inputs.run-post-stitch-script == 'true'
      run: |
        cd utils
        node postStitch.js --spec ${{ inputs.api-spec-path }}
      shell: bash

    - name: Clone OpenAPI Generator Project
      run: |
        mkdir generator
        git clone -b ${{ inputs.openapi-generator-version }} --single-branch https://github.com/${{ inputs.generator-organization }}/${{ inputs.generator-repository }} generator
        rm -r generator/.git
      shell: bash

    - name: Build Generator
      run: |
        cd generator
        mvn --projects org.openapitools:openapi-generator-cli --am clean install
        cd ..
      shell: bash

    - name: Build SDK
      run: |
        java -jar generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate \
         -g ${{ inputs.language }} \
         -i ${{ inputs.api-spec-path }}  \
         -c ${{ inputs.config }} 
      shell: bash
    
    - name: Cleanup
      run: |
        if [ '${{ inputs.file-source }}' == 'remote' ]
        then
          rm -r remote
        fi
        rm -r generator
        rm -r node_modules
      shell: bash

    - name: Commmit
      run: |
          git diff
          if [ $(git diff --exit-code) ]
          then
            echo "No Changes"
            git commit --allow-empty -m "Generate SDK (No Changes)"
          else 
            echo "Changes"
            git add .
            git commit -m "Generate SDK with ${{ inputs.generator-organization }}:${{ inputs.generator-repository }} ${{ inputs.openapi-generator-version }}"
          fi
          git push origin ${{ inputs.branch-name }}
      shell: bash
